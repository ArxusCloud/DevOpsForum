name: Deploy ASP.NET Core app to Azure Web App 

on:
  push:
    branches:
      - master
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: "DevOpsForum"           # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: '.'             # set this to the path to your web app project, defaults to the repository root
  DOTNET_VERSION: '3.1.302'                  # set this to the dot net version to use
  ARM_CLIENT_ID: ${{ secrets.TF_ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.TF_ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.TF_ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.TF_ARM_TENANT_ID }}

jobs:
  # Build Job
  build:
    runs-on: ubuntu-latest
    steps:

    # Checkout the repo
    - uses: actions/checkout@master
    
    - name: Creating artifact directories
      run: |
        mkdir buildartifacts
        mkdir terraformtemplates

    # Setup .NET Core SDK
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }} 
    
    # Run dotnet build and publish
    - name: dotnet build unit test and publish
      run: |
        cd Application
        dotnet restore
        dotnet build --configuration Release
        dotnet test aspnet-core-dotnet-core.UnitTests/aspnet-core-dotnet-core.UnitTests.csproj
        dotnet publish -c Release -o '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/build'
    
    # Archive Application
    - name: Archive Application
      uses: papeloto/action-zip@v1
      with:
        files: ./Application/build
        dest: ./buildartifacts/Application.zip

    # Upload Application To Artifact
    - name: Upload Application to Build Artifact
      continue-on-error: false
      uses: actions/upload-artifact@v2
      with:
        name: buildartifacts
        path: buildartifacts

    # Archive Terraform scripts
    - name: Archive Terraform
      uses: papeloto/action-zip@v1
      with:
        files: ./Terraform
        dest: ./terraformtemplates/Terraform.zip

    # Upload Terraform Scripts to Artifact
    - name: Upload terraformtemplates to Artifact
      continue-on-error: false
      uses: actions/upload-artifact@v2
      with:
        name: terraformtemplates
        path: terraformtemplates

  # Deploy Job
  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    # Download buildartifacts
    - name: Download a Build Artifact
      uses: actions/download-artifact@v2
      continue-on-error: false
      with:
        name: buildartifacts
        path: buildartifacts

    # Unzip Application Artifact
    - name: unzipping build artifact
      uses: montudor/action-zip@v0.1.0
      with:
       args: unzip -qq ./buildartifacts/Application.zip -d ./Application

    # Download Terraform Artifacts
    - name: Download templates
      uses: actions/download-artifact@v2
      continue-on-error: false
      with:
        name: terraformtemplates
        path: terraformtemplates

    # Unzip Terraform Artifact
    - name: unzipping Terraform artifact
      run: |
        unzip -d ./TerraformTemplates ./terraformtemplates/Terraform.zip

    # Login to Azure
    - name: Login to Azure
      uses: azure/login@v1
      continue-on-error: false
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Setup Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.14.3

    - name: Terraform Init
      run: terraform init
      working-directory: ./TerraformTemplates

    - name: Terraform Format
      run: terraform fmt
      working-directory: ./TerraformTemplates

    - name: Terraform Plan
      run: terraform plan
      working-directory: ./TerraformTemplates

    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: ./TerraformTemplates

    - name: 'Deploy web app'
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        package: '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/Application'

#  FunctionalTests:
#    name: Functional tests
#    runs-on: windows-latest
#    needs: deploy
#    steps:
#    - uses: actions/checkout@master
#    - name: Setup .NET Core
#      uses: actions/setup-dotnet@v1
#      with:
#        dotnet-version: ${{ env.DOTNET_VERSION }} 
#    - name: update web app url in Run Settings
#      shell: powershell
#      run: |
#        cd Application\aspnet-core-dotnet-core.FunctionalTests
#        [xml]$runSetting = Get-Content functionalTests.runsettings
#        $runSetting.RunSettings.TestRunParameters.ChildNodes.Item(0).value = 'https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/'
#        $runSetting.Save("$(pwd)/functionalTests.runsettings")
#    - name: Run tests
#      continue-on-error: false
#      run: |
#        pushd .
#        cd $env:temp
#        $Path = $env:TEMP; $Installer = "chrome_installer.exe"; Invoke-WebRequest "https://dl.google.com/chrome/install/latest/chrome_installer.exe" -OutFile $Path$Installer; Start-Process -FilePath $Path$Installer -Args "/silent /install" -Verb RunAs -Wait; Remove-Item $Path$Installer
#        Invoke-WebRequest https://chromedriver.storage.googleapis.com/83.0.4103.39/chromedriver_win32.zip -outFile chromedriver.zip
#        Expand-Archive -Path chromedriver.zip
#        Remove-Item chromedriver.zip
#        popd
#        cd Application\aspnet-core-dotnet-core.FunctionalTests
#        dotnet test aspnet-core-dotnet-core.FunctionalTests.csproj -s functionalTests.runsettings

